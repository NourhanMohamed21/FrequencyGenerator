C51 COMPILER V9.60.7.0   FREQUENCY_GENERATOR_PROTEUS_V2                                    05/06/2023 23:14:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FREQUENCY_GENERATOR_PROTEUS_V2
OBJECT MODULE PLACED IN .\Objects\Frequency Generator Proteus v2.obj
COMPILER INVOKED BY: C:\Program Files\KEIL\C51\BIN\C51.EXE Frequency Generator Proteus v2.c OPTIMIZE(8,SPEED) BROWSE DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\Frequency Generator Proteus v2.lst) TABS(2) OBJECT(.\Objects\Frequency Generator Proteu
                    -s v2.obj)

line level    source

   1          #include <reg51.h>
   2          #define KEYPAD_NO_NEW_DATA '-'
   3          static unsigned char Last_valid_Key_G = KEYPAD_NO_NEW_DATA;
   4          unsigned char pKey; // stored inside it the pressed key. 
   5          unsigned char position=0; // shows which digits will appear in the 7 segement.  
   6          unsigned char IN[]= {'0','0','0','0'}; // array of digits in entered by user.
   7          unsigned char arr[10]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x98}; // array contains the values to
             - display numbers 0-9 on the 7-segment LED display.
   8          unsigned char reset = 0;//controls push button
   9          unsigned char highVal= 0x00; // stores the upper 2 hex char of the calculated freq.
  10          unsigned char lowVal = 0x00; // stores the lower 2 hex char of the calculated freq.
  11          unsigned char counter=0; // needed for timers with time more than 71ms.
  12          unsigned char temp=0; // needed for timers with time more than 71ms. decremented till zero and refilled ag
             -ain with counter.
  13          
  14          // pin assignment. 
  15          sbit LED = P3^7;
  16          sbit Tr1 = P0^0;
  17          sbit Tr2 = P0^1;
  18          sbit Tr3 = P0^2;
  19          sbit Tr4 = P0^3;
  20          sbit c3 =P1^7;
  21          sbit c2 =P1^6;
  22          sbit c1 =P1^5;
  23          sbit c0 =P1^4;
  24          sbit r3 =P1^3;
  25          sbit r2 =P1^2;
  26          sbit r1 =P1^1;
  27          sbit r0 =P1^0;
  28          
  29          // debounce function used to get some delay after keypad button click.
  30          void debounce()
  31          {
  32   1           unsigned char i = 100;
  33   1           unsigned char j = 1000;
  34   1           for(;i>0;i--)
  35   1           for(;j>0;j--);    
  36   1      } 
  37          
  38          // KeyPad_Scan used to detect the pressed value.
  39          char KeyPad_Scan(void)
  40          {
  41   1        static char Old_Key;
  42   1        char Key = KEYPAD_NO_NEW_DATA; //-
  43   1        
  44   1        //if row zerois pressed check which column is pressed to get the exact letter.
  45   1        r0=0;
  46   1        if(c3 ==0) {Key= 'A';}
  47   1        else if(c2==0) {Key= '3';}
  48   1        else if(c1==0) {Key= '2';}
  49   1        else if(c0==0) {Key= '1';}
  50   1        r0=1;
  51   1        
C51 COMPILER V9.60.7.0   FREQUENCY_GENERATOR_PROTEUS_V2                                    05/06/2023 23:14:22 PAGE 2   

  52   1        r1=0;
  53   1        if(c3 ==0) {Key= 'B';}
  54   1        else if(c2==0) {Key= '6';}
  55   1        else if(c1==0) {Key= '5';}
  56   1        else if(c0==0) {Key= '4';}
  57   1        r1=1;
  58   1        
  59   1        r2=0;
  60   1        if(c3 ==0) {Key= 'C';}
  61   1        else if(c2==0) {Key= '9';}
  62   1        else if(c1==0) {Key= '8';}
  63   1        else if(c0==0) {Key= '7';}
  64   1        r2=1;
  65   1        
  66   1        r3=0;
  67   1        if(c3 ==0) {Key= 'D';}
  68   1        else if(c2==0) {Key= '#';}
  69   1        else if(c1==0) {Key= '0';}
  70   1        else if(c0==0) {Key= '*';}
  71   1        r3=1;
  72   1        
  73   1        // used to get delay after each press 
  74   1        debounce();
  75   1        
  76   1        // check the validity of the pressed key.
  77   1        if(Key == KEYPAD_NO_NEW_DATA)
  78   1        {
  79   2          Old_Key = KEYPAD_NO_NEW_DATA;
  80   2          Last_valid_Key_G = KEYPAD_NO_NEW_DATA;
  81   2          return 0;
  82   2        }
  83   1        
  84   1        // check that the key is not as the last pressed key and assign the global variable pkey.
  85   1        if(Key == Old_Key)
  86   1        {
  87   2          if(Key !=Last_valid_Key_G)
  88   2          {
  89   3            pKey=Key;
  90   3            Last_valid_Key_G = Key;
  91   3            return 1;
  92   3          }
  93   2        }
  94   1        Old_Key = Key;
  95   1        return 0; 
  96   1      }
  97          
  98          // delay to produce square wave with given time.
  99          void Timer1_freqGenration (void) interrupt 3
 100          {  
 101   1        TH1=highVal;
 102   1        TL1=lowVal;
 103   1        if (temp==0)
 104   1        {LED = ~LED;
 105   2          temp=counter;
 106   2        }
 107   1        else  temp--;
 108   1      }
 109          
 110          // function to calculate the frequency generator.
 111          void freqGenerator(void ){
 112   1        unsigned short int delay; 
 113   1        float delayTime;
C51 COMPILER V9.60.7.0   FREQUENCY_GENERATOR_PROTEUS_V2                                    05/06/2023 23:14:22 PAGE 3   

 114   1        unsigned short int freq;
 115   1        //float adjust;
 116   1        freq=(IN[0]-'0')*1000+(IN[1]-'0')*100+(IN[2]-'0')*10+(IN[3]-'0'); // get the frequency the user entered
 117   1        // calculate the overhead    
 118   1        if (freq < 1500)
 119   1          delayTime = 0.985;
 120   1          else if (freq < 2500)
 121   1          delayTime = 0.94;
 122   1          else if (freq<3500)
 123   1          delayTime = 0.89;
 124   1          else if (freq<4500)
 125   1          delayTime = 0.87;
 126   1          else if (freq<5500)
 127   1          delayTime = 0.85;
 128   1          else if (freq<7500)
 129   1          delayTime = 0.79;
 130   1          else if (freq<9500)
 131   1          delayTime = 0.75;
 132   1          else
 133   1          delayTime = 0.72;
 134   1      
 135   1         delayTime = (delayTime/(freq*2));  // delay = Ts/2
 136   1        if (delayTime <= 0.071){ //maximum limit at TH0 = 00 and TL0 = 00
 137   2          delayTime = delayTime/(0.000001085); 
 138   2          delayTime = 65536 - delayTime; // get the numbers of cycles.
 139   2          delay = (int)delayTime;
 140   2          lowVal = delay & 0xff;  // lower 8 bits
 141   2          highVal = delay >> 8;   // higher 8 bits
 142   2          counter=0; 
 143   2          temp=0;
 144   2        }
 145   1        else
 146   1          {
 147   2            // if the time needed more than 71ms divide the time needed by 10ms and assign it to counter and temp
 148   2            counter = (int)(delayTime / 0.01);
 149   2            // assign the lowVal and highVal to 10ms if we need 50ms timer then counter equals 5 and loop over 10ms
             - 5 times
 150   2            lowVal = 0x0FF; 
 151   2            highVal = 0x0DB;
 152   2            temp=counter; 
 153   2        }
 154   1      }
 155          
 156          // called when the user presses the push button. 
 157          void keyPressed (void) interrupt 0
 158          {
 159   1        if (reset==0)
 160   1        {
 161   2        // Calculate the frequency entered by the user.
 162   2        freqGenerator();
 163   2        // Start the timer 
 164   2        TR1=1;
 165   2        reset = 1;
 166   2        }
 167   1        else
 168   1        {
 169   2        TR1 = 0;
 170   2        TF1 = 0;  
 171   2        LED = 1;  
 172   2        IN[0]='0';
 173   2        IN[1]='0';
 174   2        IN[2]='0';
C51 COMPILER V9.60.7.0   FREQUENCY_GENERATOR_PROTEUS_V2                                    05/06/2023 23:14:22 PAGE 4   

 175   2        IN[3]='0';
 176   2        reset = 0;
 177   2        }
 178   1        debounce();
 179   1      } 
 180          
 181          // function for timer 0 to display on the 7 segment.  
 182          void display() interrupt 1
 183          {
 184   1        // digits array used to declare Tr1,Tr2,Tr3 and Tr4 with 1 to be closed.
 185   1         unsigned char digits[] = {1,1,1,1};
 186   1        // timer for 4.4ms refreshing screen time.  
 187   1          TL0=0x00;
 188   1          TH0=0xF0;
 189   1        // open only 1 Tr to display a digit. 
 190   1          P0 = 1 << position;
 191   1        // display on port2.
 192   1          P2 = arr[IN[position]-'0'];
 193   1          position++;         
 194   1          if (position == 4){
 195   2              position = 0;
 196   2          } 
 197   1      }
 198          
 199          void main()
 200          { 
 201   1        SP=0x30;
 202   1        // Declare the timer rgister.
 203   1        TMOD =  (TMOD & 0xF0) | 0x11;   // timer 0 in mode 1 (16 bit counter) and timer 1 in mode 1.
 204   1        //  declare timer0 registers
 205   1        IT0=1;
 206   1        ET0=1;
 207   1        TL0=0x00;
 208   1        TH0=0x0F0;
 209   1        // declare int0 registers.
 210   1        EX0=1;
 211   1        EA=1;
 212   1        // start timer0 
 213   1        TR0=1;
 214   1        TH1=highVal;
 215   1        TL1=lowVal;
 216   1        ET1=1;
 217   1        EA=1;
 218   1        // declare all rows by zero.
 219   1        r0 = 1;
 220   1        r1 = 1;
 221   1        r2 = 1;
 222   1        r3 = 1;
 223   1      
 224   1        while(1)
 225   1          { 
 226   2        // call keypad to detect if user pressed any letter   
 227   2          if(KeyPad_Scan() == 1)
 228   2          {
 229   3            // shift the 7 segments letters on click.
 230   3            IN[0]=IN[1];
 231   3            IN[1]=IN[2];
 232   3            IN[2]=IN[3];
 233   3            IN[3]=pKey; 
 234   3          } 
 235   2        } 
 236   1      }
C51 COMPILER V9.60.7.0   FREQUENCY_GENERATOR_PROTEUS_V2                                    05/06/2023 23:14:22 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    884    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
